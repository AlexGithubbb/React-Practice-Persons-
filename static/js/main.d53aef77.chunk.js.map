{"version":3,"sources":["App.module.css","Person/Person.module.css","Person/Person.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","App","red","green","bold","Person","Radium","_ref","name","age","children","onClick","change","react_default","a","createElement","className","classes","style","@media (min-width: 500px)","width","type","onChange","placeholder","state","persons","id","oterState","showPersons","switchNameHandler","newName","_this","setState","changeNameHandler","event","personIndex","findIndex","p","person","Object","objectSpread","target","value","toConsumableArray","togglePersonHandler","doesShow","deletePersonHandler","splice","_this2","this","button","padding","border","font","cursor","color","backgroundColor",":hover","map","index","src_Person_Person","key","length","push","styles","style_root","join","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d53aef77.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1j2i9\",\"red\":\"App_red__1m_h_\",\"green\":\"App_green__14bx_\",\"bold\":\"App_bold__2aXE0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Person\":\"Person_Person__2J8JP\"};","import React from 'react';\nimport classes from '../Person/Person.module.css';\nimport Radium from 'radium';\n\nconst Person = ({name, age, children, onClick, change}) => {\n  const media = {\n    '@media (min-width: 500px)' : {\n      width: \"450px\"\n    }\n  }\n  return (\n    <div className = {classes.Person} style = {media}>\n      {/* I'm a {name} and I'm {Math.floor(Math.random()*30)} years old */}\n      <p onClick = {onClick}  >I'm a {name} and I'm {age} years old</p>\n      <p>{children}</p>\n      <input type=\"text\" onChange = {change} placeholder = {name}/>\n    </div>\n  )\n}\n\nexport default Radium(Person);\n","import React, { Component } from 'react';\nimport styles from './App.module.css';\nimport Person from './Person/Person';\nimport Radium, { StyleRoot } from 'radium';\n\nclass App extends Component {\n  state = {\n    persons: [\n      { id: '1', name: 'Yisheng', age: 19 },\n      { id: '2', name: 'Bowei', age: 25 },\n      { id: '3', name: 'Stphinie', age: 44 }\n    ],\n    oterState: 'this is another state',\n    showPersons: false\n  };\n  switchNameHandler = newName => {\n    this.setState({\n      persons: [\n        { id: '1', name: newName, age: 19 },\n        { id: '2', name: 'Bowei', age: 25 },\n        { id: '3', name: 'Jennifer', age: 44 }\n      ]\n    });\n  };\n\n  changeNameHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(p => {\n      return p.id === id;\n    });\n    const person = { ...this.state.persons[personIndex] }; // get the correspoding person\n\n    person.name = event.target.value;\n\n    const persons = [...this.state.persons];\n\n    // update array with the personIndex we fetched before\n    persons[personIndex] = person;\n\n    this.setState({ persons: persons });\n  };\n\n  togglePersonHandler = () => {\n    const doesShow = this.state.showPersons;\n    this.setState({ showPersons: !doesShow });\n  };\n\n  deletePersonHandler = personIndex => {\n    // const persons = this.state.persons.slice();\n    const persons = [...this.state.persons]; // this will spread the original array and put each item into a new array => (new)persons\n    persons.splice(personIndex, 1);\n    this.setState({ persons }); // this.setState({persons: persons})\n  };\n  render() {\n    const button = {\n      // backgroundColor: 'white',\n      padding: '8px',\n      border: '1px solid blue',\n      font: 'inherit',\n      cursor: 'pointer',\n      color: 'white',\n      backgroundColor: 'green',\n      // hovering is not recommend here, in in-line styling, it's pretty hard to operate it, but we can do it with Radium\n      ':hover': {\n        backgroundColor: 'lightgreen',\n        color: 'black'\n      }\n    };\n\n    let persons = null;\n    let classes = [];\n    if (this.state.showPersons) {\n      persons = (\n        <div>\n          {this.state.persons.map((person, index) => {\n            return (\n              <Person\n                key={person.id}\n                // onClick={this.switchNameHandler.bind(this, 'Jack No.2')}\n                onClick={() => this.deletePersonHandler(index)}\n                name={person.name}\n                age={person.age}\n                change={event => this.changeNameHandler(event, person.id)}\n              />\n            );\n          })}\n        </div>\n      );\n      button.backgroundColor = 'red';\n      button[':hover'] = {\n        backgroundColor: 'salmon',\n        color: 'black'\n      };\n    }\n    if (this.state.persons.length <= 2) {\n      classes.push(styles.red);\n    }\n    if (this.state.persons.length <= 1) {\n      classes.push(styles.bold);\n    }\n\n    return (\n      <StyleRoot>\n        <div className={styles.App}>\n          {/* <Sidebar /> */}\n          <h1>Welcome to React world</h1>\n          <p className={classes.join(' ')}>This is really working!</p>\n          <button style={button} onClick={this.togglePersonHandler}>\n            Toggle persons\n          </button>\n          {persons}\n        </div>\n      </StyleRoot>\n    );\n  }\n}\n\nexport default Radium(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}